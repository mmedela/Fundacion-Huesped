# -*- coding: utf-8 -*-
"""huesped.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SOh75AiVvtjxnhLJDOql87LM2uVqdIm4
"""

import smtplib, ssl, email, os, PyPDF2
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

#Algunos valores por default usados en el codigo.
DEFAULT_PDF = "Nombres.pdf"
DEFAULT_PATH = "pages_to_send/"

#Separates input_pdf into individual pages and stores them in 'folder_path'
#Fails if 'folder_path' or 'input_pdf' don't exist
def get_individual_pages(folder_path, input_pdf):
  try:
    with open(input_pdf, 'rb') as pdf_file_obj:
      pdf_reader = PyPDF2.PdfFileReader(pdf_file_obj)
      for i in range(pdf_reader.numPages):
        page_object = pdf_reader.getPage(i)
        name = page_object.extractText().split('\n')[0]
        pdf_writer = PyPDF2.PdfFileWriter()
        pdf_writer.addPage(page_object)
        path = folder_path + name + ".pdf"
        with open(path, 'wb') as f:
          pdf_writer.write(f)
  except Exception as e:
      print(e)

get_individual_pages(DEFAULT_PATH, DEFAULT_PDF)

#Deletes all files at 'directory'
def clean_directory(directory):
  directory = os.fsencode(directory)
  for file in os.listdir(directory):
    file_name = os.fsdecode(file)
    os.unlink(DEFAULT_PATH + file_name)

#Sends an email with the file at 'file_path' attached
#'file_path' must exist
def send_file(file_path, receiver_email = "mmedela@fi.uba.ar", body = "", message = None):
  smtp_server = "smtp.gmail.com"
  port = 587 
  sender_email = "marianmedela@gmail.com"
  #If you are using google, you need to usa an account with an app password. 
  #See documentation at https://support.google.com/accounts/answer/185833?hl=en.
  password = "your own password"
  subject= "Fundacion Huesped"
  try:
    #Here I set some default values if the user to use if needed.
    if message == None:
      message = MIMEMultipart()
      message["From"] = sender_email
      message["To"] = receiver_email
      message["Subject"] = subject
    if body == "":
      body = "This is an email with attachment sent from Fundacion Huesped"

    message.attach(MIMEText(body, "plain"))
    context = ssl.create_default_context()
    #Here the file gets attached
    with open(file_path, "rb") as attachment:
      part = MIMEBase("application", "octet-stream")
      part.set_payload(attachment.read())
    encoders.encode_base64(part)
    file_name = file_path.split("/")[-1]
    part.add_header(
      "Content-Disposition",
      f"attachment; filename= {file_name}",
    )
    message.attach(part)

    server = smtplib.SMTP(smtp_server,port)
    server.starttls(context=context) 
    server.login(sender_email, password)
    server.sendmail(sender_email, receiver_email, message.as_string())
    server.quit() 
  except Exception as e:
      print(e)

#Uses the client's name to generate an email
def get_client_mail(client_name):
  return client_name.split(" ")[0] + "@gmail.com"

#Iterates through all files in 'path_to_directory' and sends them one by one
#Fails if 'path_to_directory' doesn't exist
def send_mails(path_to_directory = DEFAULT_PATH):
  directory = os.fsencode(path_to_directory)
  for file in os.listdir(directory):
    file_name = os.fsdecode(file)
    if file_name.endswith(".pdf"):
      send_file(DEFAULT_PATH + file_name, receiver_email=get_client_mail(file_name.split('.')[0]))

def main():
  try:
    send_mails()
    clean_directory(DEFAULT_PATH)
  except Exception as e:
      print(e)

if __name__ == "__main__":
    main()